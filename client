#!/usr/bin/env python3

import socket
# from crypto.signature import Signature
from utilities import Utilities

class Client(object):

    # Create socket, keys, define algorithms
    def __init__(self, algo='rsa'):
        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Contains client public keys, private keys, server public keys
        self.keychain = {}
        self.algo = algo
        self.encrypt = Utilities.enc_algos[algo]
        self.decrypt = Utilities.dec_algos[algo]
        # self.sign = Utilities.sign_algos[sign]

    # Generate public and private keys
    # In the case of symmetric encryption, publish p/alpha.
    def generate_keys(self):
        return None, None

    # Connect to server
    def run(self):
        self.client.connect((Utilities.HOST, Utilities.SERVER_PORT))
        self.key_exchange()
        message = input('Write your message: ')

        # Encrpyt message with chosen algorithm
        cipher = self.encrypt(message, self.keychain)

        # Sign message
        # signed_cipher = self.sign(cipher)

        # Send data
        # self.client.send(signed_cipher.encode())
        self.client.send(cipher)

        # Recieve response
        cipher_response = self.client.recv(4096)

        plaintext = self.decrypt(cipher_response, self.keychain[self.algo])

        print('Recieved: {}'.format(plaintext))

        # # Verify signature
        # if Signature().verify(signed_response):
        #     # Decrypt
        #     cipher_response = signed_response.split(',')[1]
        #     plaintext = self.decrypt(cipher_response, self.server_key)
        #     print('Recieved: {}'.format(plaintext))
        # else:
        #     raise Exception("Signature couldn't be verified.")

    # Exchange public keys (Diffie Hellman)
    # Use self.client to send and recieve keys
    # Store server key in self.server_key
    def key_exchange(self):
        # Pick and publish (p, alpha)
        ## Ask for server's, wait until it's there
        self.client.connect((Utilities.HOST, Utilities.KEY_PORT))
        self.client.send("symm")    # Request symmetric key
        p_alpha = self.client.recv(1024)      # Recieve p, alpha
        p = p_alpha.split(",")[1].split("|")[0]     # p
        alpha = p_alpha.split(",")[1].split("|")[1] # alpha
        # Secrety pick x/y
        x = 2019
        # Send alpha^x/alpha^y
        self.client.send("symmclient,"+str(alpha^x))
        # self.symm_key (k) = (alpha^x)^y (mod p)
        #                   = (alpha^y)^x (mod p)
        pass
